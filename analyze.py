import rdkit.Chem as Chem
from rdkit.Chem import Descriptors
import pandas as pd
from collections import Counter

def mw_distribution(smiles_list):
    molecular_weights = []
    for smiles in smiles_list:
        mol = Chem.MolFromSmiles(smiles)
        if mol:
            mol_weight =Chem.Descriptors.MolWt(mol)
            molecular_weights.append(round(mol_weight, 2))  # 保留两位小数方便统计

    total = len(molecular_weights)
    weight_counter = Counter(molecular_weights)

    X = list(weight_counter.keys())
    Y = [count / total * 100 for count in weight_counter.values()]  # 百分比

    return X, Y,molecular_weights

def element_distribution(smiles_list):
    element_counter = Counter()
    total_atoms = 0
    
    for smiles in smiles_list:
        mol = Chem.MolFromSmiles(smiles)
        if mol:
            atoms = mol.GetAtoms()
            for atom in atoms:
                element_counter[atom.GetSymbol()] += 1
                total_atoms += 1
    
    X = list(element_counter.keys())
    Y = [count / total_atoms * 100 for count in element_counter.values()]
    Y = [ round(i,2)for i in Y]
    
    return X, Y


def selected_clusters(li=[0,4,8,11,12,14]):
    d={'Cluster0': [3, 4, 5, 13, 14, 92, 93, 98, 123, 157, 235, 306, 316, 322, 417, 458, 541, 542, 621, 673, 703, 705, 712, 720, 757, 783],
       'Cluster1': [8, 11, 22, 30, 36, 37, 39, 48, 49, 53, 55, 64, 67, 73, 80, 81, 82, 83, 91, 124, 125, 129, 130, 131, 137, 142, 147, 151, 152, 155, 162, 166, 176, 178, 181, 182, 187, 190, 192, 205, 207, 210, 211, 216, 217, 222, 228, 229, 231, 237, 241, 254, 257, 265, 269, 273, 275, 282, 286, 300, 308, 313, 314, 317, 327, 328, 337, 342, 343, 349, 354, 368, 374, 381, 382, 392, 398, 409, 416, 421, 422, 451, 479, 481, 505, 511, 514, 518, 532, 533, 535, 547, 548, 554, 561, 567, 588, 591, 593, 598, 602, 613, 615, 616, 622, 624, 625, 627, 631, 633, 643, 644, 647, 651, 652, 657, 661, 664, 667, 669, 670, 678, 691, 693, 698, 699, 708, 714, 725, 728, 729, 737, 749, 751, 756, 769, 797, 816],
       'Cluster2': [38, 52, 66, 84, 106, 132, 139, 140, 175, 185, 194, 195, 196, 221, 223, 239, 252, 258, 264, 270, 279, 284, 288, 295, 296, 299, 302, 326, 330, 335, 338, 357, 394, 395, 403, 408, 420, 423, 430, 456, 462, 463, 465, 466, 469, 477, 486, 490, 507, 515, 517, 545, 551, 581, 586, 590, 599, 606, 607, 608, 609, 614, 619, 620, 632, 640, 642, 646, 671, 690, 701, 717, 730, 734, 752, 758, 762, 771, 773, 792, 795, 796, 798, 802, 826],
       'Cluster3': [12, 16, 44, 62, 65, 85, 104, 136, 173, 233, 247, 309, 312, 315, 345, 356, 367, 375, 383, 384, 407, 411, 445, 476, 485, 487, 503, 560, 562, 571, 577, 595, 629, 649, 687, 689, 702, 709, 716, 732, 748, 774, 780, 787, 789, 791, 819, 830, 831, 832, 840, 844],
       'Cluster4': [230, 443, 721],
       'Cluster5': [121, 153, 154, 171, 226, 245, 318, 320, 323, 324, 325, 329, 348, 388, 393, 400, 402, 406, 426, 439, 447, 457, 468, 475, 492, 494, 501, 502, 513, 553, 579, 580, 635, 777, 794],
       'Cluster6': [1, 2, 6, 18, 20, 23, 29, 31, 32, 43, 54, 56, 57, 61, 76, 116, 135, 146, 179, 184, 199, 218, 249, 255, 261, 262, 272, 278, 280, 292, 347, 352, 371, 379, 410, 412, 413, 489, 543, 565, 566, 574, 576, 578, 584, 604, 641, 648, 655, 656, 672, 677, 683, 684, 685, 695, 713, 731, 739, 740, 754, 764, 767, 775, 810, 811, 812, 814, 841],
       'Cluster7': [115, 164, 250, 453, 474, 582, 784, 823, 839, 843],
       'Cluster8': [41, 90, 110, 113, 114, 134, 169, 177, 234, 243, 244, 259, 290, 303, 305, 321, 355, 373, 376, 377, 389, 391, 397, 415, 452, 473, 482, 495, 504, 506, 508, 509, 523, 529, 555, 568, 572, 589, 630, 634, 745],
       'Cluster9': [161, 163, 170, 339, 341, 370, 431, 446, 484, 534, 781, 800, 821, 822, 825, 827],
       'Cluster10': [47, 87, 101, 102, 108, 167, 168, 293, 294, 319, 378, 385, 390, 414, 427, 437, 438, 440, 441, 442, 497, 498, 510, 573, 594, 603, 628, 659, 666, 700, 742, 786, 788, 818, 835, 836, 837],
       'Cluster11': [17, 19, 21, 28, 35, 50, 70, 71, 77, 78, 79, 96, 100, 119, 120, 144, 148, 149, 158, 165, 172, 180, 191, 202, 212, 225, 236, 238, 253, 268, 271, 331, 333, 351, 359, 362, 364, 366, 386, 399, 404, 425, 433, 436, 467, 471, 500, 519, 520, 528, 537, 549, 559, 587, 605, 610, 626, 650, 658, 674, 681, 692, 696, 697, 723, 750, 761, 763, 790, 813, 820],
       'Cluster12': [26, 34, 95, 156, 160, 224, 232, 263, 289, 350, 387, 405, 434, 435, 454, 470, 472, 483, 488, 522, 524, 530, 557, 583, 585, 600, 636, 668, 743, 785, 793, 807, 838, 842],
       'Cluster13': [111, 112, 380, 448, 499, 707, 747, 799, 801, 833, 834],
       'Cluster14': [0, 24, 25, 40, 42, 86, 89, 94, 201, 227, 256, 260, 449, 455, 480, 491, 531, 675, 718, 755],
       'Cluster15': [10, 15, 27, 45, 46, 51, 58, 59, 63, 69, 72, 88, 97, 107, 126, 127, 128, 138, 143, 145, 159, 197, 198, 200, 203, 206, 213, 215, 220, 242, 246, 248, 266, 274, 281, 283, 287, 297, 298, 304, 307, 310, 334, 336, 340, 344, 346, 358, 369, 401, 419, 424, 428, 429, 444, 460, 461, 464, 478, 493, 512, 516, 521, 525, 526, 527, 538, 539, 540, 546, 550, 552, 556, 563, 564, 575, 596, 601, 611, 617, 618, 637, 638, 645, 653, 654, 660, 662, 663, 665, 676, 679, 680, 682, 688, 704, 710, 726, 727, 733, 735, 736, 741, 744, 753, 759, 765, 768, 770, 778, 782, 804, 805, 806, 808, 809, 815, 828, 845],
       'Cluster16': [7, 9, 33, 60, 68, 74, 75, 99, 103, 105, 109, 117, 118, 122, 133, 141, 150, 174, 183, 186, 188, 189, 193, 204, 208, 209, 214, 219, 240, 251, 267, 276, 277, 285, 291, 301, 311, 332, 353, 360, 361, 363, 365, 372, 396, 418, 432, 450, 459, 496, 536, 544, 558, 569, 570, 592, 597, 612, 623, 639, 686, 694, 706, 711, 715, 719, 722, 724, 738, 746, 760, 766, 772, 776, 779, 803, 817, 824, 829]
       }
    idx_list=[]
    cluster_list=[]
    for c in li:
        i_list=d[f'Cluster{c}']
        c_list=[c]*len(i_list)
        for i in range(len(i_list)):
            idx_list.append(i_list[i])
            cluster_list.append(c_list[i])

    # df=pd.DataFrame([{'idx':s_l}])
    df=pd.read_csv('./data/data.csv')
    df2=pd.DataFrame({'cluster':cluster_list,'idx':idx_list})
    df2['canonicalsmiles']=df2['idx'].apply(lambda x: df[df['idx']==x]['canonicalsmiles'].values[0])
    df2.to_csv('./data/recommend_clusters.csv',index=False)


if __name__=='__main__':
    selected_clusters()
    pass
